#!/bin/zsh

#App launch
alias airport='open -a "/System/Applications/Utilities/Airport Utility.app"'
alias amon='open -a "/System//Applications/Utilities/Activity Monitor.app"'
alias appstore='open -a "/System/Applications/App Store.app"'
alias automator='open -a "/System/Applications/Automator.app"'
alias brave='open -a "$HOME/Applications/Brave Browser.app"'
alias calc='open -a "/System/Applications/Calculator.app"'
alias docker-app='open -a "$HOME/Applications/Docker.app"'
alias excel='open -a "/Applications/Microsoft Excel.app"'
alias facetime='open -a "/System/Applications/FaceTime.app"'
alias ghd='open -a "$HOME/Applications/GitHub Desktop.app"'
alias idea='open -a "/Applications/IntelliJ IDEA CE.app"'
alias messages='open -a "/System/Applications/Messages.app"'
alias mpv='open -a "$HOME/Applications/mpv.app"'
alias postman='open -a "/Applications/Postman.app"'
alias ppt='open -a "/Applications/Microsoft PowerPoint.app"'
alias slack='open -a "/Applications/Slack.app"'
alias sysinfo='open -a "/System/Applications/Utilities/System Information.app"'
alias syspref='open -a "/System//Applications/System Preferences.app"'
alias teams='open -a "/Applications/Microsoft Teams.app"'
alias webtorrent='open -a $HOME/Applications/WebTorrent.app'
alias whatsapp='open -a "/Applications/Whatsapp.app"'
alias word='open -a "/Applications/Microsoft Word.app"'
alias xcode='open -a /Applications/Xcode.app'
alias zoom='open -a "/Applications/zoom.us.app"'

alias -s tex='docker run -i -t --rm -v `pwd`:/data docker-registry.eccenca.com/eccenca-latex:v1.10.0 rubber --inplace --maxerr -1 --short --force --warn all --pdf'
alias afk="pmset displaysleepnow"
alias awsregion="aws ec2 describe-availability-zones --output text --query 'AvailabilityZones[0].[RegionName]'"
alias bi="brew install"
alias c="clear"
alias catn="grep -Ev '''^(#|$)'''"
alias cleanupDS="find . -type f -name '*.DS_Store' -ls -delete"
alias confige="e ${XDG_CONFIG_HOME}/"
alias cr="cargo run --verbose" # Rust .rs program file in folder
alias db='docker build -f '
alias dc="cd"
alias e=editor
alias eb="edit-brew"
alias ec="edit-config"
alias editHosts='sudo edit /etc/hosts'
alias en0="ipconfig getifaddr en0"
alias ea="edit-aliases"
alias en="edit-nvim"
alias ey="edit-yadm"
alias ez="edit-zsh"
alias eza-defaults="eza --git --octal-permissions --header --group-directories-first"
alias f="open -a Finder ./"
alias fix_stty="stty sane"
alias gC="git clone"
alias gP="git pull"
alias gsk="gpg --list-secret-keys --keyid-format LONG"
alias gst="gpg show-ref --tags"
alias h="history"
alias icat="ghostty imgcat"
alias ipinfo="curl ipinfo.io"
alias j="jobs -l"
alias k9="kill -9"
alias k="kubectl"
alias ka="killall"
alias kall='k get all -o wide --show-labels'
alias kc='k config get-contexts'
alias kd='k -o yaml --dry-run=client'
alias keys="catn $HOME/.config/zsh/aliases/aliases"
alias killall-nvim="killall -9 nvim"
alias kn='k config set-context --current --namespace '
alias l="ll"
alias la="ll --all"
alias listening="lsof -nP +c 15 | grep LISTEN"
alias ll="eza-defaults --icons --header --long"
alias lls="command ls --color=never"
alias localip="ifconfig | grep 'inet ' | grep -v 127.0.0.1 | cut -d\  -f2"
alias lt="dust -b -H -r -X '.git'"
alias make10mb='mkfile 10m ./10MB.dat'
alias make1mb='mkfile 1m ./1MB.dat'
alias make5mb='mkfile 5m ./5MB.dat'
alias mkpwd="xkcdpass --count=5 --acrostic=\"chaos\" -C \"first\" -R --min=5 --max=6 -D \"#@^&~_-;\""
alias now='date +"%A %Y-%m-%d %T %p %s"'
alias numFiles='echo $(ls -1 | wc -l)'
alias p="pwd"
alias path='echo -e ${PATH//:/\\n}'
alias ports="lsof -i -n -P | grep TCP"
alias pubip="curl ipinfo.io | jq -r .ip"
alias qfind="find . -name "
alias ramfree="top -l 1 -s 0 | grep PhysMem"
alias shots="open $SCREENSHOTS"
alias sign='gpg --detach-sign --armor'
alias sl="ls"
alias sourcetree='open -a SourceTree'
alias spacefree="du -h | awk 'END{print $1}'"
alias tree="eza --tree --level=5 --icons --group-directories-first --color auto"
alias ua="update-all"
alias ub="update-brew"
alias uc="update-cargo"
alias ug="update-golang"
alias un="update-node"
alias uv="update-nvim"
alias vbc="source venv/bin/activate"
alias vde="source deactivate"
alias ven="virtualenv venv"
alias vers="sw_vers"
alias wanip4="dig @resolver1.opendns.com ANY myip.opendns.com +short"
alias wanip6="dig @resolver1.opendns.com AAAA myip.opendns.com +short -6"
alias x="exit"
alias yA='yadm add --all'
alias ya='yadm add'
alias yc='yadm commit'
alias yd='yadm diff'
alias yds='yadm diff --staged'
alias yl='yadm pull --recurse-submodules'
alias ylols='yadm log --graph --pretty='\''%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'\'' --stat'
alias yP='yadm pull'
alias yp='yadm push'
alias yrh='yadm reset'
alias yrhh='yadm reset --hard'
alias yst='yadm status'
alias ysu='yadm status -u'

httpDebug() { /usr/bin/curl $@ -o /dev/null -w "dns: %{time_namelookup} connect: %{time_connect} pretransfer: %{time_pretransfer} starttransfer: %{time_starttransfer} total: %{time_total}\n"; }
httpHeaders() { /usr/bin/curl -I -L $@; }

mcd() { mkdir -p "$1" && cd "$1"; }
ql() { qlmanage -p "$*" >&/dev/null; }
trash() { command mv "$@" ~/.Trash; }
zipf() { zip -r "$1".zip "$1"; }

ff() { /usr/bin/find . -name "$@"; }     # ff:       Find file under the current directory
ffs() { /usr/bin/find . -name "$@"'*'; } # ffs:      Find file whose name starts with a given string
ffe() { /usr/bin/find . -name '*'"$@"; } # ffe:      Find file whose name ends with a given string
spotlight() { mdfind "kMDItemDisplayName == '$@'wc"; }

findPid() { lsof -t -c "$@"; }

my_ps() { ps $@ -u $USER -o pid,%cpu,%mem,start,time,bsdtime,command; }

extract() {
	if [ -f $1 ]; then
		case $(echo "$1" | tr "[A-Z]" "[a-z]") in
		*.tar.bz2) tar xjf $1 ;;
		*.tar.gz) tar xzf $1 ;;
		*.bz2) bunzip2 $1 ;;
		*.rar) unrar e $1 ;;
		*.gz) gunzip $1 ;;
		*.tar) tar xf $1 ;;
		*.tbz2) tar xjf $1 ;;
		*.tgz) tar xzf $1 ;;
		*.zip) unzip $1 ;;
		*.Z) uncompress $1 ;;
		*.7z) 7z x $1 ;;
		*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

gas() {
	git status
	git add . -A
	git commit -m "$1"
	git push
}

gsa() {
	git stash save "$1" -a
	git stash list
} # -a = all (untracked, ignored)

gd() { # get dirty
	[[ $(git status 2>/dev/null | tail -n1) != *"working directory clean"* ]] && echo "*"
}

ydh() {
	yadm diff HEAD~"${1:-1}"
}

ycp() {
	if (($# == 0)); then
		yadm commit && yadm push
	else
		yadm commit -m "$*" && yadm push
	fi
}

ii() {
	echo -e "\nYou are logged on ${RED}$HOST"
	echo -e "\nAdditionnal information:$NC "
	uname -a
	echo -e "\n${RED}Users logged on:$NC "
	w -h
	echo -e "\n${RED}Current date :$NC "
	date
	echo -e "\n${RED}Machine stats :$NC "
	uptime
	echo -e "\n${RED}Current network location :$NC "
	scselect
	echo -e "\n${RED}Public facing IP Address :$NC "
	pubip
	#echo -e "\n${RED}DNS Configuration:$NC " ; scutil --dns
	echo
}

feature_branch() {
	local main_branch="main"
	local prefix="feature"
	local today=$(date +%Y-%m-%d)
	local username=$(echo "$USER" | tr '[:upper:]' '[:lower:]') # Convert $USER to lowercase
	local additional_path=$(echo "$*" | tr ' ' '-')             # Convert arguments to hyphen-separated string
	local index=1
	local new_branch

	# Construct the branch path prefix with optional additional path
	local branch_path="${prefix}/${username}"
	[[ -n "$additional_path" ]] && branch_path="${branch_path}/${additional_path}"
	branch_path="${branch_path}/${today}"

	# Switch to main branch and pull latest changes if not on main
	if [[ "$(git branch --show-current)" != "$main_branch" ]]; then
		echo "Switching to ${main_branch} and pulling latest changes..."
		git checkout $main_branch
		git pull
	fi

	# Find the next available branch index for today
	while git rev-parse --verify --quiet "${branch_path}/${index}"; do
		index=$((index + 1))
	done

	# Create and switch to the new branch
	new_branch="${branch_path}/${index}"
	echo "Creating and checking out ${new_branch}..."
	git checkout -b $new_branch
}

alias fb="feature_branch"
